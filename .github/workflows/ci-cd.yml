name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_BACKEND: ${{ secrets.DOCKER_USERNAME }}/inventory-backend
      IMAGE_FRONTEND: ${{ secrets.DOCKER_USERNAME }}/inventory-frontend
      IMAGE_WEBSERVER: ${{ secrets.DOCKER_USERNAME }}/inventory-webserver
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # Docker login
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & Push Backend
      - name: Build & push backend image
        run: |
          docker build -t $IMAGE_BACKEND:latest -t $IMAGE_BACKEND:$IMAGE_TAG backend
          docker push $IMAGE_BACKEND:latest
          docker push $IMAGE_BACKEND:$IMAGE_TAG

      # Build & Push Frontend
      - name: Build & push frontend image
        run: |
          docker build -t $IMAGE_FRONTEND:latest -t $IMAGE_FRONTEND:$IMAGE_TAG frontend
          docker push $IMAGE_FRONTEND:latest
          docker push $IMAGE_FRONTEND:$IMAGE_TAG

      # Build & Push Webserver (nginx)
      - name: Build & push webserver image
        run: |
          docker build -t $IMAGE_WEBSERVER:latest -t $IMAGE_WEBSERVER:$IMAGE_TAG backend/nginx
          docker push $IMAGE_WEBSERVER:latest
          docker push $IMAGE_WEBSERVER:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cleanup old Docker containers, images, volumes
      - name: Cleanup old Docker on VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          strict: false
          script: |
            echo ">>> Removing old containers, images, volumes..."
            docker compose down -v --remove-orphans || true
            docker system prune -a -f --volumes || true
            rm -rf ~/inventory
            mkdir -p ~/inventory

      # Copy docker-compose.yml
      - name: Copy docker-compose.yml to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/inventory"

      # Deploy
      - name: Deploy containers
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          strict: false
          script: |
            set -e
            cd ~/inventory

            echo ">>> Pulling latest images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/inventory-backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/inventory-frontend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/inventory-webserver:latest

            echo ">>> Starting containers..."
            docker compose up -d --remove-orphans

            echo ">>> Waiting 10s for DB..."
            sleep 10

            echo ">>> Running migrations..."
            docker compose exec -T backend php artisan migrate --force || true
